import requests
import pandas as pd

API_KEY="TU_API_KEY"
CHANNEL_ID="TU_CHANNEL_ID"

#Fechas a analizar
START_DATE="2025-02-01T00:00:00Z"
END_DATE="2025-02-28T23:59:59Z"

def get_videos_published_in_month():
    url=f"https://www.googleapis.com/youtube/v3/search?key={API_KEY}&channelId={CHANNEL_ID}&part=snippet,id&type=video&publishedAfter={START_DATE}&publishedBefore={END_DATE}&maxResults=50"
    response= requests.get(url).json()
    
    videos=[]
    for item in response.get("items",[]):
        video_id= item["id"]["videoId"]
        title=item["snippet"]["title"]
        videos.append((video_id,title))
        
    return videos
    
videos= get_videos_published_in_month()
print(videos) #Lista de videos publicados en Febrero

def get_video_views(video_id):
    url=f"https://www.googleapis.com/youtube/v3/videos?part=statistics&id={video_id}&key={API_KEY}"
    response=requests.get(url).json()
    return int(response["items"][0]["statistics"]["viewCount"])

views_per_video= {title:get_video_views(video_id) for video_id,title in videos}

#Para un mejor analisis convertirlo en un DF
df=pd.DataFrame(views_per_video.items(),columns=["Videos","Views"])
print(df)
print(f"Total de views en el mes de febrero: {df['Views'].sum()}")


# Función para obtener estadísticas de engagement por video
def get_video_stats(video_id):
    url = f"https://www.googleapis.com/youtube/v3/videos?part=statistics&id={video_id}&key={API_KEY}"
    response = requests.get(url).json()
    stats = response.get("items", [])[0].get("statistics", {})
    
    return {
        "views": int(stats.get("viewCount", 0)),
        "likes": int(stats.get("likeCount", 0)),
        "comments": int(stats.get("commentCount", 0))
    }

# Obtener lista de videos
videos = get_videos_published_in_month()

# Obtener métricas por video
video_data = []
for video_id, title in videos:
    stats = get_video_stats(video_id)
    video_data.append({
        "title": title,
        "views": stats["views"],
        "likes": stats["likes"],
        "comments": stats["comments"],
        "like_ratio": round(stats["likes"] / stats["views"], 4) if stats["views"] > 0 else 0,
        "comment_ratio": round(stats["comments"] / stats["views"], 4) if stats["views"] > 0 else 0,
    })

# Convertir a DataFrame
df = pd.DataFrame(video_data)
print(df)

# Engagement promedio del canal
total_views = df["views"].sum()
total_likes = df["likes"].sum()
total_comments = df["comments"].sum()
avg_like_ratio = total_likes / total_views if total_views > 0 else 0
avg_comment_ratio = total_comments / total_views if total_views > 0 else 0

print(f"Total Views: {total_views}")
print(f"Total Likes: {total_likes}")
print(f"Total Comments: {total_comments}")
print(f"Average Like Ratio: {avg_like_ratio:.4f}")
print(f"Average Comment Ratio: {avg_comment_ratio:.4f}")
